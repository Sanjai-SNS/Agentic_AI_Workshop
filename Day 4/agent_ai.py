# -*- coding: utf-8 -*-
"""Agent AI.ipynb"""

# ‚úÖ STEP 1: Install Required Packages
!pip install google-generativeai tavily-python markdown2 weasyprint --quiet

# ‚úÖ STEP 2: Import Libraries
import os
import google.generativeai as genai
from tavily import TavilyClient
from markdown2 import markdown
from weasyprint import HTML

# ‚úÖ STEP 3: Configure API Keys (Replace with your real keys)
GEMINI_API_KEY = ""
TAVILY_API_KEY = ""

genai.configure(api_key=GEMINI_API_KEY)
tavily = TavilyClient(api_key=TAVILY_API_KEY)

# ‚úÖ STEP 4: Define the Agent Class
class GeminiWebResearchAgent:
    def __init__(self, topic):
        self.topic = topic
        self.research_questions = []
        self.research_data = {}

    def generate_questions(self):
        model = genai.GenerativeModel("gemini-1.5-flash-latest")
        prompt = f"""
        Generate 5‚Äì6 well-structured and diverse research questions for the topic: "{self.topic}".
        Cover different subtopics or angles related to this theme.
        """
        response = model.generate_content(prompt)
        output = response.text.strip()
        self.research_questions = [line.strip("-‚Ä¢1234567890. ").strip() for line in output.split('\n') if line.strip()]
        return self.research_questions

    def search_web(self, query):
        results = tavily.search(query=query, search_depth="advanced", max_results=3)
        return [(res['title'], res['content']) for res in results['results']]

    def gather_info(self):
        for question in self.research_questions:
            print(f"üîç Searching: {question}")
            self.research_data[question] = self.search_web(question)

    def compile_report(self):
        report = f"# üìò Research Report: {self.topic}\n\n"
        report += "## üß≠ Introduction\n"
        report += f"This report explores key research questions on **{self.topic}**, generated by Gemini Pro and answered using real-time web data via the Tavily API. It follows the ReAct (Reasoning + Acting) pattern: planning using an LLM and acting via web search.\n\n"
        report += "---\n\n"

        for idx, question in enumerate(self.research_questions, start=1):
            report += f"## {idx}. {question}\n\n"
            report += f"### üîç Summary:\n"
            report += f"- *(Summary needs to be filled manually or generated in future)*\n\n"
            report += f"### üì∞ Sources:\n"
            for i, (title, content) in enumerate(self.research_data[question], start=1):
                snippet = content.strip().split('\n')[0][:300].strip()
                report += f"- **{title}**\n  > {snippet}...\n\n"
            report += "---\n\n"

        report += "## ‚úÖ Conclusion\n"
        report += f"This concludes the research findings. The agent leveraged Gemini Pro for planning and Tavily for real-time web information retrieval.\n"
        return report

# ‚úÖ STEP 5: Run the Agent

topic = "Impact of Generative AI on Education"  # Change topic as needed
agent = GeminiWebResearchAgent(topic)

print("üß† Generating research questions...")
agent.generate_questions()

print("üåê Gathering web information...")
agent.gather_info()

print("üìù Compiling markdown report...")
markdown_report = agent.compile_report()

# Save markdown to file
with open("gemini_research_report.md", "w") as f:
    f.write(markdown_report)

# ‚úÖ STEP 7: Download the PDF (in Colab)
from google.colab import files

# Convert markdown to PDF and then download
# Assuming markdown2 and weasyprint are installed from step 1
try:
    html_content = markdown(markdown_report)
    HTML(string=html_content).write_pdf("gemini_research_report.pdf")
    files.download("gemini_research_report.pdf")
except NameError:
    print("Error: 'markdown_report' is not defined. Please run the previous cell to generate the report.")
except Exception as e:
    print(f"An error occurred during PDF conversion or download: {e}")
